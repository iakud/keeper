// Code generated by kds. DO NOT EDIT.
// source: TODO: Source File

package kds;

import (
	"github.com/iakud/keeper/kds/kdsc/example/pb"
)

type City struct {
	Id int64
	syncable pb.City
	PlayerBasicInfo *PlayerBasicInfo
	CityInfo *CityBaseInfo
	dirty uint64
}

func (e *City) SetPlayerId(v int64) {
	if v != e.syncable.PlayerId {
		e.syncable.PlayerId = v
		e.markDirty(uint64(0x01) << 1)
	}
}

func (e *City) SetPlayerBasicInfo(v *PlayerBasicInfo) {
	if v != e.PlayerBasicInfo {
		e.PlayerBasicInfo = v
		e.syncable.PlayerBasicInfo = &v.syncable
		v.dirthParent = func() {
			e.markDirty(2)
		}
		e.markDirty(uint64(0x01) << 2)
	}
}

func (e *City) SetCityInfo(v *CityBaseInfo) {
	if v != e.CityInfo {
		e.CityInfo = v
		e.syncable.CityInfo = &v.syncable
		v.dirthParent = func() {
			e.markDirty(3)
		}
		e.markDirty(uint64(0x01) << 3)
	}
}

func (e *City) markDirty(n uint64) {
	if e.dirty & n == n {
		return
	}
	e.dirty |= n
}

func (e *City) clearDirty() {
	if e.dirty == 0 {
		return
	}
	e.dirty = 0
}

func (e *City) DumpChange() *pb.City {
	v := new(pb.City)
	if e.dirty & uint64(0x01) << 1 != 0 {
		v.PlayerId = e.syncable.PlayerId
	}
	if e.dirty & uint64(0x01) << 2 != 0 {
		v.PlayerBasicInfo = e.PlayerBasicInfo.DumpChange()
	}
	if e.dirty & uint64(0x01) << 3 != 0 {
		v.CityInfo = e.CityInfo.DumpChange()
	}
	return v
}

func (e *City) DumpFull() *pb.City {
	v := new(pb.City)
	v.PlayerId = e.syncable.PlayerId
	v.PlayerBasicInfo = e.PlayerBasicInfo.DumpFull()
	v.CityInfo = e.CityInfo.DumpFull()
	return v
}

type dirtyParentFunc_CityBaseInfo func()

func (f dirtyParentFunc_CityBaseInfo) invoke() {
	if f == nil {
		return
	}
	f()
}

type CityBaseInfo struct {
	syncable pb.CityBaseInfo
	Position *Vector
	dirty uint64
	dirthParent dirtyParentFunc_CityBaseInfo
}

func (c *CityBaseInfo) SetPosition(v *Vector) {
	if v != c.Position {
		c.Position = v
		c.syncable.Position = &v.syncable
		c.markDirty(uint64(0x01) << 1)
	}
}

func (c *CityBaseInfo) markDirty(n uint64) {
	if c.dirty&n == n {
		return
	}
	c.dirty |= n
	c.dirthParent.invoke()
}

func (c *CityBaseInfo) clearDirty() {
	if c.dirty == 0 {
		return
	}
	c.dirty = 0
}

func (c *CityBaseInfo) DumpChange() *pb.CityBaseInfo {
	if c == nil {
		return nil
	}
	v := new(pb.CityBaseInfo)
	if c.dirty & uint64(0x01) << 1 != 0 {
		v.Position = c.Position.DumpChange()
	}
	return v
}

func (c *CityBaseInfo) DumpFull() *pb.CityBaseInfo {
	v := new(pb.CityBaseInfo)
	v.Position = c.Position.DumpFull()
	return v
}

type dirtyParentFunc_Vector func()

func (f dirtyParentFunc_Vector) invoke() {
	if f == nil {
		return
	}
	f()
}

type Vector struct {
	syncable pb.Vector
	dirty uint64
	dirthParent dirtyParentFunc_Vector
}

func (c *Vector) SetX(v int32) {
	if v != c.syncable.X {
		c.syncable.X = v
		c.markDirty(uint64(0x01) << 1)
	}
}

func (c *Vector) SetY(v int32) {
	if v != c.syncable.Y {
		c.syncable.Y = v
		c.markDirty(uint64(0x01) << 2)
	}
}

func (c *Vector) markDirty(n uint64) {
	if c.dirty&n == n {
		return
	}
	c.dirty |= n
	c.dirthParent.invoke()
}

func (c *Vector) clearDirty() {
	if c.dirty == 0 {
		return
	}
	c.dirty = 0
}

func (c *Vector) DumpChange() *pb.Vector {
	if c == nil {
		return nil
	}
	v := new(pb.Vector)
	if c.dirty & uint64(0x01) << 1 != 0 {
		v.X = c.syncable.X
	}
	if c.dirty & uint64(0x01) << 2 != 0 {
		v.Y = c.syncable.Y
	}
	return v
}

func (c *Vector) DumpFull() *pb.Vector {
	v := new(pb.Vector)
	v.X = c.syncable.X
	v.Y = c.syncable.Y
	return v
}