// Code generated by kds. DO NOT EDIT.
// source: TODO: Source File

package kds;

import (
	"time"

	"github.com/iakud/keeper/kds/kdsc/example/pb"
	"google.golang.org/protobuf/types/known/timestamppb"
	"google.golang.org/protobuf/types/known/durationpb"
)

type Player struct {
	id int64
	syncable syncablePlayer

	dirty uint64
}

func NewPlayer() *Player {
	x := new(Player)
	x.dirty = 1
	x.id = 0 // FIXME: gen nextId()
	x.setInfo(NewPlayerBasicInfo())
	x.setHero(NewPlayerHero())
	x.setBag(NewPlayerBag())
	return x
}

func (x *Player) GetId() int64 {
	return x.id
}

type syncablePlayer struct {
	Info *PlayerBasicInfo
	Hero *PlayerHero
	Bag *PlayerBag
}

func (x *Player) GetInfo() *PlayerBasicInfo {
	return x.syncable.Info
}

func (x *Player) setInfo(v *PlayerBasicInfo) {
	if v != x.syncable.Info {
		x.syncable.Info = v
		v.dirthParent = func() {
			x.markDirty(uint64(0x01) << 1)
		}
		x.markDirty(uint64(0x01) << 1)
	}
}

func (x *Player) GetHero() *PlayerHero {
	return x.syncable.Hero
}

func (x *Player) setHero(v *PlayerHero) {
	if v != x.syncable.Hero {
		x.syncable.Hero = v
		v.dirthParent = func() {
			x.markDirty(uint64(0x01) << 2)
		}
		x.markDirty(uint64(0x01) << 2)
	}
}

func (x *Player) GetBag() *PlayerBag {
	return x.syncable.Bag
}

func (x *Player) setBag(v *PlayerBag) {
	if v != x.syncable.Bag {
		x.syncable.Bag = v
		v.dirthParent = func() {
			x.markDirty(uint64(0x01) << 3)
		}
		x.markDirty(uint64(0x01) << 3)
	}
}

func (x *Player) DumpChange() *pb.Player {
	v := new(pb.Player)
	if x.checkDirty(uint64(0x01) << 1) {
		v.Info = x.syncable.Info.DumpChange()
	}
	if x.checkDirty(uint64(0x01) << 2) {
		v.Hero = x.syncable.Hero.DumpChange()
	}
	if x.checkDirty(uint64(0x01) << 3) {
		v.Bag = x.syncable.Bag.DumpChange()
	}
	return v
}

func (x *Player) DumpFull() *pb.Player {
	v := new(pb.Player)
	v.Info = x.syncable.Info.DumpFull()
	v.Hero = x.syncable.Hero.DumpFull()
	v.Bag = x.syncable.Bag.DumpFull()
	return v
}

func (x *Player) markDirty(n uint64) {
	if x.dirty & n == n {
		return
	}
	x.dirty |= n
}

func (x *Player) clearDirty() {
	if x.dirty == 0 {
		return
	}
	x.dirty = 0
	x.syncable.Info.clearDirty()
	x.syncable.Hero.clearDirty()
	x.syncable.Bag.clearDirty()
}

func (x *Player) checkDirty(n uint64) bool {
	return x.dirty & n != 0
}

type dirtyParentFunc_PlayerBasicInfo func()

func (f dirtyParentFunc_PlayerBasicInfo) invoke() {
	if f == nil {
		return
	}
	f()
}

type PlayerBasicInfo struct {
	syncable syncablePlayerBasicInfo

	dirty uint64
	dirthParent dirtyParentFunc_PlayerBasicInfo
}

func NewPlayerBasicInfo() *PlayerBasicInfo {
	x := new(PlayerBasicInfo)
	x.dirty = 1
	return x
}

type syncablePlayerBasicInfo struct {
	Name string
	IsNew bool
	CreateTime time.Time
}

func (x *PlayerBasicInfo) GetName() string {
	return x.syncable.Name
}

func (x *PlayerBasicInfo) SetName(v string) {
	if v != x.syncable.Name {
		x.syncable.Name = v
		x.markDirty(uint64(0x01) << 1)
	}
}

func (x *PlayerBasicInfo) GetIsNew() bool {
	return x.syncable.IsNew
}

func (x *PlayerBasicInfo) SetIsNew(v bool) {
	if v != x.syncable.IsNew {
		x.syncable.IsNew = v
		x.markDirty(uint64(0x01) << 3)
	}
}

func (x *PlayerBasicInfo) GetCreateTime() time.Time {
	return x.syncable.CreateTime
}

func (x *PlayerBasicInfo) SetCreateTime(v time.Time) {
	if v != x.syncable.CreateTime {
		x.syncable.CreateTime = v
		x.markDirty(uint64(0x01) << 5)
	}
}

func (x *PlayerBasicInfo) DumpChange() *pb.PlayerBasicInfo {
	v := new(pb.PlayerBasicInfo)
	if x.checkDirty(uint64(0x01) << 1) {
		v.Name = x.syncable.Name
	}
	if x.checkDirty(uint64(0x01) << 3) {
		v.IsNew = x.syncable.IsNew
	}
	if x.checkDirty(uint64(0x01) << 5) {
		v.CreateTime = timestamppb.New(x.syncable.CreateTime)
	}
	return v
}

func (x *PlayerBasicInfo) DumpFull() *pb.PlayerBasicInfo {
	v := new(pb.PlayerBasicInfo)
	v.Name = x.syncable.Name
	v.IsNew = x.syncable.IsNew
	v.CreateTime = timestamppb.New(x.syncable.CreateTime)
	return v
}

func (x *PlayerBasicInfo) markDirty(n uint64) {
	if x.dirty & n == n {
		return
	}
	x.dirty |= n
	x.dirthParent.invoke()
}

func (x *PlayerBasicInfo) clearDirty() {
	if x.dirty == 0 {
		return
	}
	x.dirty = 0
}

func (x *PlayerBasicInfo) checkDirty(n uint64) bool {
	return x.dirty & n != 0
}

type dirtyParentFunc_PlayerHero func()

func (f dirtyParentFunc_PlayerHero) invoke() {
	if f == nil {
		return
	}
	f()
}

type PlayerHero struct {
	syncable syncablePlayerHero

	dirty uint64
	dirthParent dirtyParentFunc_PlayerHero
}

func NewPlayerHero() *PlayerHero {
	x := new(PlayerHero)
	x.dirty = 1
	x.setHeroes(NewHero())
	return x
}

type syncablePlayerHero struct {
	Heroes *Hero
}

func (x *PlayerHero) GetHeroes() *Hero {
	return x.syncable.Heroes
}

func (x *PlayerHero) setHeroes(v *Hero) {
	if v != x.syncable.Heroes {
		x.syncable.Heroes = v
		v.dirthParent = func() {
			x.markDirty(uint64(0x01) << 1)
		}
		x.markDirty(uint64(0x01) << 1)
	}
}

func (x *PlayerHero) DumpChange() *pb.PlayerHero {
	v := new(pb.PlayerHero)
	if x.checkDirty(uint64(0x01) << 1) {
		v.Heroes = x.syncable.Heroes.DumpChange()
	}
	return v
}

func (x *PlayerHero) DumpFull() *pb.PlayerHero {
	v := new(pb.PlayerHero)
	v.Heroes = x.syncable.Heroes.DumpFull()
	return v
}

func (x *PlayerHero) markDirty(n uint64) {
	if x.dirty & n == n {
		return
	}
	x.dirty |= n
	x.dirthParent.invoke()
}

func (x *PlayerHero) clearDirty() {
	if x.dirty == 0 {
		return
	}
	x.dirty = 0
	x.syncable.Heroes.clearDirty()
}

func (x *PlayerHero) checkDirty(n uint64) bool {
	return x.dirty & n != 0
}

type dirtyParentFunc_PlayerBag func()

func (f dirtyParentFunc_PlayerBag) invoke() {
	if f == nil {
		return
	}
	f()
}

type PlayerBag struct {
	syncable syncablePlayerBag

	dirty uint64
	dirthParent dirtyParentFunc_PlayerBag
}

func NewPlayerBag() *PlayerBag {
	x := new(PlayerBag)
	x.dirty = 1
	return x
}

type syncablePlayerBag struct {
	Resources int32
}

func (x *PlayerBag) GetResources() int32 {
	return x.syncable.Resources
}

func (x *PlayerBag) SetResources(v int32) {
	if v != x.syncable.Resources {
		x.syncable.Resources = v
		x.markDirty(uint64(0x01) << 1)
	}
}

func (x *PlayerBag) DumpChange() *pb.PlayerBag {
	v := new(pb.PlayerBag)
	if x.checkDirty(uint64(0x01) << 1) {
		v.Resources = x.syncable.Resources
	}
	return v
}

func (x *PlayerBag) DumpFull() *pb.PlayerBag {
	v := new(pb.PlayerBag)
	v.Resources = x.syncable.Resources
	return v
}

func (x *PlayerBag) markDirty(n uint64) {
	if x.dirty & n == n {
		return
	}
	x.dirty |= n
	x.dirthParent.invoke()
}

func (x *PlayerBag) clearDirty() {
	if x.dirty == 0 {
		return
	}
	x.dirty = 0
}

func (x *PlayerBag) checkDirty(n uint64) bool {
	return x.dirty & n != 0
}

type dirtyParentFunc_Hero func()

func (f dirtyParentFunc_Hero) invoke() {
	if f == nil {
		return
	}
	f()
}

type Hero struct {
	syncable syncableHero

	dirty uint64
	dirthParent dirtyParentFunc_Hero
}

func NewHero() *Hero {
	x := new(Hero)
	x.dirty = 1
	return x
}

type syncableHero struct {
	HeroId int32
	HeroLevel int32
	Type HeroType
	NeedTime time.Duration
}

func (x *Hero) GetHeroId() int32 {
	return x.syncable.HeroId
}

func (x *Hero) SetHeroId(v int32) {
	if v != x.syncable.HeroId {
		x.syncable.HeroId = v
		x.markDirty(uint64(0x01) << 1)
	}
}

func (x *Hero) GetHeroLevel() int32 {
	return x.syncable.HeroLevel
}

func (x *Hero) SetHeroLevel(v int32) {
	if v != x.syncable.HeroLevel {
		x.syncable.HeroLevel = v
		x.markDirty(uint64(0x01) << 2)
	}
}

func (x *Hero) GetType() HeroType {
	return x.syncable.Type
}

func (x *Hero) SetType(v HeroType) {
	if v != x.syncable.Type {
		x.syncable.Type = v
		x.markDirty(uint64(0x01) << 3)
	}
}

func (x *Hero) GetNeedTime() time.Duration {
	return x.syncable.NeedTime
}

func (x *Hero) SetNeedTime(v time.Duration) {
	if v != x.syncable.NeedTime {
		x.syncable.NeedTime = v
		x.markDirty(uint64(0x01) << 4)
	}
}

func (x *Hero) DumpChange() *pb.Hero {
	v := new(pb.Hero)
	if x.checkDirty(uint64(0x01) << 1) {
		v.HeroId = x.syncable.HeroId
	}
	if x.checkDirty(uint64(0x01) << 2) {
		v.HeroLevel = x.syncable.HeroLevel
	}
	if x.checkDirty(uint64(0x01) << 3) {
		v.Type = x.syncable.Type
	}
	if x.checkDirty(uint64(0x01) << 4) {
		v.NeedTime = durationpb.New(x.syncable.NeedTime)
	}
	return v
}

func (x *Hero) DumpFull() *pb.Hero {
	v := new(pb.Hero)
	v.HeroId = x.syncable.HeroId
	v.HeroLevel = x.syncable.HeroLevel
	v.Type = x.syncable.Type
	v.NeedTime = durationpb.New(x.syncable.NeedTime)
	return v
}

func (x *Hero) markDirty(n uint64) {
	if x.dirty & n == n {
		return
	}
	x.dirty |= n
	x.dirthParent.invoke()
}

func (x *Hero) clearDirty() {
	if x.dirty == 0 {
		return
	}
	x.dirty = 0
}

func (x *Hero) checkDirty(n uint64) bool {
	return x.dirty & n != 0
}

type HeroType = pb.HeroType

const (
	HeroType_HeroType1 HeroType = 0
	HeroType_HeroType2 HeroType = 2
	HeroType_HeroType3 HeroType = -5
)