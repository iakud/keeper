// Code generated by kds. DO NOT EDIT.
// source: TODO: Source File

package examplekds;

import (
	"kds/example/pb"
)

type dirthParentFunc func()

func (f dirthParentFunc) invoke() {
	if f == nil {
		return
	}
	f()
}

type Player struct {
	Id int64
	syncable pb.Player
	Info *BasicInfo
	dirty uint64
}

func (this *Player) SetId(v int64) {
	if v != this.syncable.Id {
		this.syncable.Id = v
		this.markDirty(uint64(0x01) << 1)
	}
}

func (this *Player) SetInfo(v *BasicInfo) {
	if v != this.Info {
		this.Info = v
		this.syncable.Info = &v.syncable
		v.dirthParent = func() {
			this.markDirty(2)
		}
		this.markDirty(uint64(0x01) << 2)
	}
}

func (e *Player) markDirty(n uint64) {
	if e.dirty & n == n {
		return
	}
	e.dirty |= n
}

func (e *Player) clearDirty() {
	if e.dirty == 0 {
		return
	}
	e.dirty = 0
}

func (e *Player) MarshalMask() *pb.Player {
	v := new(pb.Player)
	if e.dirty & uint64(0x01) << 1 != 0 {
		v.Id = e.syncable.Id
	}
	if e.dirty & uint64(0x01) << 2 != 0 {
		v.Info = e.Info.MarshalMask()
	}
	return v
}

type BasicInfo struct {
	syncable pb.BasicInfo
	dirty uint64
	dirthParent dirthParentFunc
}

func (this *BasicInfo) SetId(v int64) {
	if v != this.syncable.Id {
		this.syncable.Id = v
		this.markDirty(uint64(0x01) << 1)
	}
}

func (this *BasicInfo) SetName(v string) {
	if v != this.syncable.Name {
		this.syncable.Name = v
		this.markDirty(uint64(0x01) << 2)
	}
}

func (this *BasicInfo) SetIsNew(v bool) {
	if v != this.syncable.IsNew {
		this.syncable.IsNew = v
		this.markDirty(uint64(0x01) << 3)
	}
}

func (this *BasicInfo) markDirty(n uint64) {
	if this.dirty&n == n {
		return
	}
	this.dirty |= n
	this.dirthParent.invoke()
}

func (e *BasicInfo) clearDirty() {
	if e.dirty == 0 {
		return
	}
	e.dirty = 0
}

func (c *BasicInfo) MarshalMask() *pb.BasicInfo {
	if c == nil {
		return nil
	}
	v := new(pb.BasicInfo)
	if c.dirty & uint64(0x01) << 1 != 0 {
		v.Id = c.syncable.Id
	}
	if c.dirty & uint64(0x01) << 2 != 0 {
		v.Name = c.syncable.Name
	}
	if c.dirty & uint64(0x01) << 3 != 0 {
		v.IsNew = c.syncable.IsNew
	}
	return v
}

type Test struct {
	syncable pb.Test
	dirty uint64
	dirthParent dirthParentFunc
}

func (this *Test) SetId(v int64) {
	if v != this.syncable.Id {
		this.syncable.Id = v
		this.markDirty(uint64(0x01) << 1)
	}
}

func (this *Test) SetName(v string) {
	if v != this.syncable.Name {
		this.syncable.Name = v
		this.markDirty(uint64(0x01) << 2)
	}
}

func (this *Test) SetIsNew(v bool) {
	if v != this.syncable.IsNew {
		this.syncable.IsNew = v
		this.markDirty(uint64(0x01) << 3)
	}
}

func (this *Test) markDirty(n uint64) {
	if this.dirty&n == n {
		return
	}
	this.dirty |= n
	this.dirthParent.invoke()
}

func (e *Test) clearDirty() {
	if e.dirty == 0 {
		return
	}
	e.dirty = 0
}

func (c *Test) MarshalMask() *pb.Test {
	if c == nil {
		return nil
	}
	v := new(pb.Test)
	if c.dirty & uint64(0x01) << 1 != 0 {
		v.Id = c.syncable.Id
	}
	if c.dirty & uint64(0x01) << 2 != 0 {
		v.Name = c.syncable.Name
	}
	if c.dirty & uint64(0x01) << 3 != 0 {
		v.IsNew = c.syncable.IsNew
	}
	return v
}