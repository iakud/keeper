// Code generated by kds. DO NOT EDIT.
// source: TODO: Source File

package examplekds;

import (
	"github.com/iakud/keeper/kds/kdsc/example/examplepb"

)

type dirthParentFunc func()

func (f dirthParentFunc) invoke() {
	if f == nil {
		return
	}
	f()
}

type Player struct {
	Id int64
	syncable pb.Player
	Info *PlayerBasicInfo
	Hero *PlayerHero
	Bag *PlayerBag
	dirty uint64
}

func (this *Player) SetInfo(v *PlayerBasicInfo) {
	if v != this.Info {
		this.Info = v
		this.syncable.Info = &v.syncable
		v.dirthParent = func() {
			this.markDirty(1)
		}
		this.markDirty(uint64(0x01) << 1)
	}
}

func (this *Player) SetHero(v *PlayerHero) {
	if v != this.Hero {
		this.Hero = v
		this.syncable.Hero = &v.syncable
		v.dirthParent = func() {
			this.markDirty(2)
		}
		this.markDirty(uint64(0x01) << 2)
	}
}

func (this *Player) SetBag(v *PlayerBag) {
	if v != this.Bag {
		this.Bag = v
		this.syncable.Bag = &v.syncable
		v.dirthParent = func() {
			this.markDirty(3)
		}
		this.markDirty(uint64(0x01) << 3)
	}
}

func (e *Player) markDirty(n uint64) {
	if e.dirty & n == n {
		return
	}
	e.dirty |= n
}

func (e *Player) clearDirty() {
	if e.dirty == 0 {
		return
	}
	e.dirty = 0
}

func (e *Player) MarshalMask() *pb.Player {
	v := new(pb.Player)
	if e.dirty & uint64(0x01) << 1 != 0 {
		v.Info = e.Info.MarshalMask()
	}
	if e.dirty & uint64(0x01) << 2 != 0 {
		v.Hero = e.Hero.MarshalMask()
	}
	if e.dirty & uint64(0x01) << 3 != 0 {
		v.Bag = e.Bag.MarshalMask()
	}
	return v
}

type PlayerBasicInfo struct {
	syncable pb.PlayerBasicInfo
	dirty uint64
	dirthParent dirthParentFunc
}

func (this *PlayerBasicInfo) SetName(v string) {
	if v != this.syncable.Name {
		this.syncable.Name = v
		this.markDirty(uint64(0x01) << 1)
	}
}

func (this *PlayerBasicInfo) SetIsNew(v bool) {
	if v != this.syncable.IsNew {
		this.syncable.IsNew = v
		this.markDirty(uint64(0x01) << 3)
	}
}

func (this *PlayerBasicInfo) markDirty(n uint64) {
	if this.dirty&n == n {
		return
	}
	this.dirty |= n
	this.dirthParent.invoke()
}

func (e *PlayerBasicInfo) clearDirty() {
	if e.dirty == 0 {
		return
	}
	e.dirty = 0
}

func (c *PlayerBasicInfo) MarshalMask() *pb.PlayerBasicInfo {
	if c == nil {
		return nil
	}
	v := new(pb.PlayerBasicInfo)
	if c.dirty & uint64(0x01) << 1 != 0 {
		v.Name = c.syncable.Name
	}
	if c.dirty & uint64(0x01) << 3 != 0 {
		v.IsNew = c.syncable.IsNew
	}
	return v
}

type PlayerHero struct {
	syncable pb.PlayerHero
	Heroes *Hero
	dirty uint64
	dirthParent dirthParentFunc
}

func (this *PlayerHero) SetHeroes(v *Hero) {
	if v != this.Heroes {
		this.Heroes = v
		this.syncable.Heroes = &v.syncable
		this.markDirty(uint64(0x01) << 1)
	}
}

func (this *PlayerHero) markDirty(n uint64) {
	if this.dirty&n == n {
		return
	}
	this.dirty |= n
	this.dirthParent.invoke()
}

func (e *PlayerHero) clearDirty() {
	if e.dirty == 0 {
		return
	}
	e.dirty = 0
}

func (c *PlayerHero) MarshalMask() *pb.PlayerHero {
	if c == nil {
		return nil
	}
	v := new(pb.PlayerHero)
	if c.dirty & uint64(0x01) << 1 != 0 {
		v.Heroes = c.Heroes.MarshalMask()
	}
	return v
}

type PlayerBag struct {
	syncable pb.PlayerBag
	dirty uint64
	dirthParent dirthParentFunc
}

func (this *PlayerBag) SetResources(v int32) {
	if v != this.syncable.Resources {
		this.syncable.Resources = v
		this.markDirty(uint64(0x01) << 1)
	}
}

func (this *PlayerBag) markDirty(n uint64) {
	if this.dirty&n == n {
		return
	}
	this.dirty |= n
	this.dirthParent.invoke()
}

func (e *PlayerBag) clearDirty() {
	if e.dirty == 0 {
		return
	}
	e.dirty = 0
}

func (c *PlayerBag) MarshalMask() *pb.PlayerBag {
	if c == nil {
		return nil
	}
	v := new(pb.PlayerBag)
	if c.dirty & uint64(0x01) << 1 != 0 {
		v.Resources = c.syncable.Resources
	}
	return v
}

type Hero struct {
	syncable pb.Hero
	dirty uint64
	dirthParent dirthParentFunc
}

func (this *Hero) SetHeroId(v int32) {
	if v != this.syncable.HeroId {
		this.syncable.HeroId = v
		this.markDirty(uint64(0x01) << 1)
	}
}

func (this *Hero) SetHeroLevel(v int32) {
	if v != this.syncable.HeroLevel {
		this.syncable.HeroLevel = v
		this.markDirty(uint64(0x01) << 2)
	}
}

func (this *Hero) markDirty(n uint64) {
	if this.dirty&n == n {
		return
	}
	this.dirty |= n
	this.dirthParent.invoke()
}

func (e *Hero) clearDirty() {
	if e.dirty == 0 {
		return
	}
	e.dirty = 0
}

func (c *Hero) MarshalMask() *pb.Hero {
	if c == nil {
		return nil
	}
	v := new(pb.Hero)
	if c.dirty & uint64(0x01) << 1 != 0 {
		v.HeroId = c.syncable.HeroId
	}
	if c.dirty & uint64(0x01) << 2 != 0 {
		v.HeroLevel = c.syncable.HeroLevel
	}
	return v
}