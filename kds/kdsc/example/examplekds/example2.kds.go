// Code generated by kds. DO NOT EDIT.
// source: TODO: Source File

package examplekds;

import (
	"github.com/iakud/keeper/kds/kdsc/example/examplepb"

)

type dirthParentFunc func()

func (f dirthParentFunc) invoke() {
	if f == nil {
		return
	}
	f()
}

type City struct {
	Id int64
	syncable pb.City
	PlayerBasicInfo *PlayerBasicInfo
	CityInfo *CityBaseInfo
	dirty uint64
}

func (this *City) SetPlayerId(v int64) {
	if v != this.syncable.PlayerId {
		this.syncable.PlayerId = v
		this.markDirty(uint64(0x01) << 1)
	}
}

func (this *City) SetPlayerBasicInfo(v *PlayerBasicInfo) {
	if v != this.PlayerBasicInfo {
		this.PlayerBasicInfo = v
		this.syncable.PlayerBasicInfo = &v.syncable
		v.dirthParent = func() {
			this.markDirty(2)
		}
		this.markDirty(uint64(0x01) << 2)
	}
}

func (this *City) SetCityInfo(v *CityBaseInfo) {
	if v != this.CityInfo {
		this.CityInfo = v
		this.syncable.CityInfo = &v.syncable
		v.dirthParent = func() {
			this.markDirty(3)
		}
		this.markDirty(uint64(0x01) << 3)
	}
}

func (e *City) markDirty(n uint64) {
	if e.dirty & n == n {
		return
	}
	e.dirty |= n
}

func (e *City) clearDirty() {
	if e.dirty == 0 {
		return
	}
	e.dirty = 0
}

func (e *City) MarshalMask() *pb.City {
	v := new(pb.City)
	if e.dirty & uint64(0x01) << 1 != 0 {
		v.PlayerId = e.syncable.PlayerId
	}
	if e.dirty & uint64(0x01) << 2 != 0 {
		v.PlayerBasicInfo = e.PlayerBasicInfo.MarshalMask()
	}
	if e.dirty & uint64(0x01) << 3 != 0 {
		v.CityInfo = e.CityInfo.MarshalMask()
	}
	return v
}

type CityBaseInfo struct {
	syncable pb.CityBaseInfo
	Position *Vector
	dirty uint64
	dirthParent dirthParentFunc
}

func (this *CityBaseInfo) SetPosition(v *Vector) {
	if v != this.Position {
		this.Position = v
		this.syncable.Position = &v.syncable
		this.markDirty(uint64(0x01) << 1)
	}
}

func (this *CityBaseInfo) markDirty(n uint64) {
	if this.dirty&n == n {
		return
	}
	this.dirty |= n
	this.dirthParent.invoke()
}

func (e *CityBaseInfo) clearDirty() {
	if e.dirty == 0 {
		return
	}
	e.dirty = 0
}

func (c *CityBaseInfo) MarshalMask() *pb.CityBaseInfo {
	if c == nil {
		return nil
	}
	v := new(pb.CityBaseInfo)
	if c.dirty & uint64(0x01) << 1 != 0 {
		v.Position = c.Position.MarshalMask()
	}
	return v
}

type Vector struct {
	syncable pb.Vector
	dirty uint64
	dirthParent dirthParentFunc
}

func (this *Vector) SetX(v int32) {
	if v != this.syncable.X {
		this.syncable.X = v
		this.markDirty(uint64(0x01) << 1)
	}
}

func (this *Vector) SetY(v int32) {
	if v != this.syncable.Y {
		this.syncable.Y = v
		this.markDirty(uint64(0x01) << 2)
	}
}

func (this *Vector) markDirty(n uint64) {
	if this.dirty&n == n {
		return
	}
	this.dirty |= n
	this.dirthParent.invoke()
}

func (e *Vector) clearDirty() {
	if e.dirty == 0 {
		return
	}
	e.dirty = 0
}

func (c *Vector) MarshalMask() *pb.Vector {
	if c == nil {
		return nil
	}
	v := new(pb.Vector)
	if c.dirty & uint64(0x01) << 1 != 0 {
		v.X = c.syncable.X
	}
	if c.dirty & uint64(0x01) << 2 != 0 {
		v.Y = c.syncable.Y
	}
	return v
}