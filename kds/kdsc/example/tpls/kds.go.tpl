{{- /* BEGIN DEFINE */ -}}

{{- define "Entity"}}
{{- $EntityName := (print .Name)}}
type {{$EntityName}} struct {
	Id int64
	syncable pb.{{.Name}}

{{- range .Fields}}
{{- if .IsComponent}}
	{{.Name}} *{{.Type}}
{{- end}}
{{- end}}
	dirty uint64
}
{{- range .Fields}}
{{""}}
{{- if FindComponent .Type}}
func (e *{{$EntityName}}) Set{{.Name}}(v *{{.Type}}) {
	if v != e.{{.Name}} {
		e.{{.Name}} = v
		e.syncable.{{.Name}} = &v.syncable
		v.dirthParent = func() {
			e.markDirty({{.Number}})
		}
		e.markDirty(uint64(0x01) << {{.Number}})
	}
}
{{- else if FindEnum .Type}}
func (e *{{$EntityName}}) Set{{.Name}}(v pb.{{.Type}}) {
	if v != e.syncable.{{.Name}} {
		e.syncable.{{.Name}} = v
		e.markDirty(uint64(0x01) << {{.Number}})
	}
}
{{- else}}
func (e *{{$EntityName}}) Set{{.Name}}(v {{GoType .Type}}) {
	if v != e.syncable.{{.Name}} {
		e.syncable.{{.Name}} = v
		e.markDirty(uint64(0x01) << {{.Number}})
	}
}
{{- end}}
{{- end}}

func (e *{{$EntityName}}) markDirty(n uint64) {
	if e.dirty & n == n {
		return
	}
	e.dirty |= n
}

func (e *{{$EntityName}}) clearDirty() {
	if e.dirty == 0 {
		return
	}
	e.dirty = 0
}

func (e *{{$EntityName}}) DumpChange() *pb.{{.Name}} {
	v := new(pb.{{.Name}})
{{- range .Fields}}
	if e.dirty & uint64(0x01) << {{.Number}} != 0 {
{{- if .IsComponent}}
		v.{{.Name}} = e.{{.Name}}.DumpChange()
{{- else}}
		v.{{.Name}} = e.syncable.{{.Name}}
{{- end}}
	}
{{- end}}
	return v
}

func (e *{{$EntityName}}) DumpFull() *pb.{{.Name}} {
	v := new(pb.{{.Name}})
{{- range .Fields}}
{{- if FindComponent .Type}}
	v.{{.Name}} = e.{{.Name}}.DumpFull()
{{- else}}
	v.{{.Name}} = e.syncable.{{.Name}}
{{- end}}
{{- end}}
	return v
}
{{- end}}

{{- define "Component"}}
{{- $ComponentName := (print .Name)}}
type dirtyParentFunc_{{.Name}} func()

func (f dirtyParentFunc_{{.Name}}) invoke() {
	if f == nil {
		return
	}
	f()
}

type {{$ComponentName}} struct {
	syncable pb.{{.Name}}

{{- range .Fields}}
{{- if FindComponent .Type}}
	{{.Name}} *{{.Type}}
{{- end}}
{{- end}}
	dirty uint64
	dirthParent dirtyParentFunc_{{.Name}}
}

{{- range .Fields}}
{{""}}
{{- if FindComponent .Type}}
func (c *{{$ComponentName}}) Set{{.Name}}(v *{{.Type}}) {
	if v != c.{{.Name}} {
		c.{{.Name}} = v
		c.syncable.{{.Name}} = &v.syncable
		c.markDirty(uint64(0x01) << {{.Number}})
	}
}
{{- else if FindEnum .Type}}
func (c *{{$ComponentName}}) Set{{.Name}}(v pb.{{.Type}}) {
	if v != c.syncable.{{.Name}} {
		c.syncable.{{.Name}} = v
		c.markDirty(uint64(0x01) << {{.Number}})
	}
}
{{- else}}
func (c *{{$ComponentName}}) Set{{.Name}}(v {{GoType .Type}}) {
	if v != c.syncable.{{.Name}} {
		c.syncable.{{.Name}} = v
		c.markDirty(uint64(0x01) << {{.Number}})
	}
}
{{- end}}
{{- end}}

func (c *{{$ComponentName}}) markDirty(n uint64) {
	if c.dirty&n == n {
		return
	}
	c.dirty |= n
	c.dirthParent.invoke()
}

func (c *{{$ComponentName}}) clearDirty() {
	if c.dirty == 0 {
		return
	}
	c.dirty = 0
}

func (c *{{$ComponentName}}) DumpChange() *pb.{{.Name}} {
	if c == nil {
		return nil
	}
	v := new(pb.{{.Name}})
{{- range .Fields}}
	if c.dirty & uint64(0x01) << {{.Number}} != 0 {
{{- if FindComponent .Type}}
		v.{{.Name}} = c.{{.Name}}.DumpChange()
{{- else}}
		v.{{.Name}} = c.syncable.{{.Name}}
{{- end}}
	}
{{- end}}
	return v
}

func (c *{{$ComponentName}}) DumpFull() *pb.{{.Name}} {
	v := new(pb.{{.Name}})
{{- range .Fields}}
{{- if FindComponent .Type}}
	v.{{.Name}} = c.{{.Name}}.DumpFull()
{{- else}}
	v.{{.Name}} = c.syncable.{{.Name}}
{{- end}}
{{- end}}
	return v
}
{{- end}}

{{- /* END DEFINE */ -}}

// Code generated by kds. DO NOT EDIT.
// source: {{"TODO: Source File"}}

package {{.Package}};

import (
{{- if or .ImportTimestamp .ImportDuration}}
	"time"
{{""}}
{{- end}}
	"github.com/iakud/keeper/kds/kdsc/example/pb"
)

{{- range .Defs}}
{{- if IsEntity .}}
{{template "Entity" .}}
{{- else if IsComponent .}}
{{template "Component" .}}
{{- end}}
{{- end}}