{{- /* BEGIN DEFINE */ -}}

{{- define "Enum"}}
{{- $EnumType := (print .Name)}}
type {{.Name}} = pb.{{.Name}}

const (
{{- range .EnumFields}}
	{{$EnumType}}_{{.Name}} {{$EnumType}} = {{.Value}}
{{- end}}
)
{{- end}}

{{- define "Message"}}
{{- $MessageName := (print .Name)}}
type syncable{{.Name}} struct {
{{- range .Fields}}
{{- if FindComponent .Type}}
	{{.Name}} *{{.Type}}
{{- else}}
	{{.Name}} {{GoType .Type}}
{{- end}}
{{- end}}
}

{{- range .Fields}}
{{- if FindComponent .Type}}

func (x *{{$MessageName}}) Get{{.Name}}() *{{.Type}} {
	return x.syncable.{{.Name}}
}

func (x *{{$MessageName}}) set{{.Name}}(v *{{.Type}}) {
	if v != x.syncable.{{.Name}} {
		x.syncable.{{.Name}} = v
		v.dirthParent = func() {
			x.markDirty(uint64(0x01) << {{.Number}})
		}
		x.markDirty(uint64(0x01) << {{.Number}})
	}
}
{{- else if FindEnum .Type}}

func (x *{{$MessageName}}) Get{{.Name}}() {{.Type}} {
	return x.syncable.{{.Name}}
}

func (x *{{$MessageName}}) Set{{.Name}}(v {{.Type}}) {
	if v != x.syncable.{{.Name}} {
		x.syncable.{{.Name}} = v
		x.markDirty(uint64(0x01) << {{.Number}})
	}
}
{{- else}}

func (x *{{$MessageName}}) Get{{.Name}}() {{GoType .Type}} {
	return x.syncable.{{.Name}}
}

func (x *{{$MessageName}}) Set{{.Name}}(v {{GoType .Type}}) {
	if v != x.syncable.{{.Name}} {
		x.syncable.{{.Name}} = v
		x.markDirty(uint64(0x01) << {{.Number}})
	}
}
{{- end}}
{{- end}}

func (x *{{$MessageName}}) DumpChange() *pb.{{.Name}} {
	v := new(pb.{{.Name}})
{{- range .Fields}}
	if x.checkDirty(uint64(0x01) << {{.Number}}) {
{{- if FindComponent .Type}}
		v.{{.Name}} = x.syncable.{{.Name}}.DumpChange()
{{- else if .IsTimestamp}}
		v.{{.Name}} = timestamppb.New(x.syncable.{{.Name}})
{{- else if .IsDuration}}
		v.{{.Name}} = durationpb.New(x.syncable.{{.Name}})
{{- else}}
		v.{{.Name}} = x.syncable.{{.Name}}
{{- end}}
	}
{{- end}}
	return v
}

func (x *{{$MessageName}}) DumpFull() *pb.{{.Name}} {
	v := new(pb.{{.Name}})
{{- range .Fields}}
{{- if FindComponent .Type}}
	v.{{.Name}} = x.syncable.{{.Name}}.DumpFull()
{{- else if .IsTimestamp}}
	v.{{.Name}} = timestamppb.New(x.syncable.{{.Name}})
{{- else if .IsDuration}}
	v.{{.Name}} = durationpb.New(x.syncable.{{.Name}})
{{- else}}
	v.{{.Name}} = x.syncable.{{.Name}}
{{- end}}
{{- end}}
	return v
}

{{- end}}

{{- define "Entity"}}
{{- $EntityName := (print .Name)}}
type {{$EntityName}} struct {
	id int64
	syncable syncable{{.Name}}

	dirty uint64
}

func New{{$EntityName}}() *{{$EntityName}} {
	x := new({{$EntityName}})
	x.dirty = 1
	x.id = 0 // FIXME: gen nextId()
{{- range .Fields}}
{{- if FindComponent .Type}}
	x.set{{.Name}}(New{{.Type}}())
{{- end}}
{{- end}}
	return x
}

func (x *{{$EntityName}}) GetId() int64 {
	return x.id
}
{{template "Message" .}}

func (x *{{$EntityName}}) markDirty(n uint64) {
	if x.dirty & n == n {
		return
	}
	x.dirty |= n
}

func (x *{{$EntityName}}) clearDirty() {
	if x.dirty == 0 {
		return
	}
	x.dirty = 0
{{- range .Fields}}
{{- if FindComponent .Type}}
	x.syncable.{{.Name}}.clearDirty()
{{- end}}
{{- end}}
}

func (x *{{$EntityName}}) checkDirty(n uint64) bool {
	return x.dirty & n != 0
}

{{- end}}

{{- define "Component"}}
{{- $ComponentName := (print .Name)}}
type dirtyParentFunc_{{.Name}} func()

func (f dirtyParentFunc_{{.Name}}) invoke() {
	if f == nil {
		return
	}
	f()
}

type {{$ComponentName}} struct {
	syncable syncable{{.Name}}

	dirty uint64
	dirthParent dirtyParentFunc_{{.Name}}
}

func New{{$ComponentName}}() *{{$ComponentName}} {
	x := new({{$ComponentName}})
	x.dirty = 1
{{- range .Fields}}
{{- if FindComponent .Type}}
	x.set{{.Name}}(New{{.Type}}())
{{- end}}
{{- end}}
	return x
}
{{template "Message" .}}

func (x *{{$ComponentName}}) markDirty(n uint64) {
	if x.dirty & n == n {
		return
	}
	x.dirty |= n
	x.dirthParent.invoke()
}

func (x *{{$ComponentName}}) clearDirty() {
	if x.dirty == 0 {
		return
	}
	x.dirty = 0
{{- range .Fields}}
{{- if FindComponent .Type}}
	x.syncable.{{.Name}}.clearDirty()
{{- end}}
{{- end}}
}

func (x *{{$ComponentName}}) checkDirty(n uint64) bool {
	return x.dirty & n != 0
}
{{- end}}

{{- /* END DEFINE */ -}}

// Code generated by kds. DO NOT EDIT.
// source: {{"TODO: Source File"}}

package {{.Package}};

import (
{{- if or .ImportTimestamp .ImportDuration}}
	"time"
{{""}}
{{- end}}
	"github.com/iakud/keeper/kds/kdsc/example/pb"
{{- if .ImportTimestamp}}
	"google.golang.org/protobuf/types/known/timestamppb"
{{- end}}
{{- if .ImportDuration}}
	"google.golang.org/protobuf/types/known/durationpb"
{{- end}}
)

{{- range .Defs}}
{{- if IsEnum .}}
{{template "Enum" .}}
{{- else if IsEntity .}}
{{template "Entity" .}}
{{- else if IsComponent .}}
{{template "Component" .}}
{{- end}}
{{- end}}